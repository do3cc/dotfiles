FROM debian:bookworm

# Accept proxy build args for caching
ARG http_proxy
ARG https_proxy
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy

# Set environment to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Update system and install only essential tools for testing (not the packages init.py will install)
# Note: Not cleaning apt cache to allow package caching across builds
RUN apt-get update && \
    apt-get install -y \
        sudo \
        curl

# Create a non-root user for testing
RUN useradd -m -s /bin/bash testuser && \
    echo 'testuser ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# Ensure /etc/os-release exists with correct content
RUN echo 'ID=debian' > /etc/os-release && \
    echo 'NAME="Debian GNU/Linux"' >> /etc/os-release

# Switch to test user
USER testuser
WORKDIR /home/testuser

# Set environment variables
ENV HOME=/home/testuser
ENV USER=testuser
ENV PATH="/home/testuser/.local/bin:/home/testuser/.cargo/bin:$PATH"

# Install uv for the test user (use cached version if available, now curl is available)
RUN if [ -f /cache/uv/install.sh ]; then \
        echo "Using cached uv installer"; \
        cp /cache/uv/install.sh ~/uv-install.sh; \
    else \
        echo "Downloading uv installer"; \
        curl -LsSf https://astral.sh/uv/install.sh -o ~/uv-install.sh; \
    fi && \
    chmod +x ~/uv-install.sh && \
    ~/uv-install.sh

# Set UV cache directory to use mounted cache
ENV UV_CACHE_DIR=/cache/uv-cache

# Create minimal fish config directory structure (stable layer)
RUN mkdir -p ~/.config/fish

# Clear proxy env vars for runtime
ENV http_proxy=
ENV https_proxy=

CMD ["/bin/bash"]